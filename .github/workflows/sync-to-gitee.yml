name: Build Magisk Module

on:
  push:
    branches:
      - '*'
      - '!main'
    paths:
      - 'module.prop'
      - 'META-INF/**'
      - 'system/**'
      - 'customize.sh'
      - 'service.sh'
      - 'post-fs-data.sh'
      - 'uninstall.sh'
  release:
    types: [published, created, edited]  # 移除 branches 过滤器
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ... 保持 build 任务不变 ...

  sync:
    needs: build  # 添加任务依赖，确保在 build 之后运行
    if: github.event_name == 'release' || github.event_name == 'push'  # 只在 release 或 push 时运行
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure Git
        env:
          GITEE_USER: lucky__cat
        run: |
          git config --global user.name "${GITEE_USER}"
          git config --global user.email "${GITEE_USER}@users.noreply.github.com"

      - name: Fetch all branches and tags
        run: |
          git remote set-branches origin '*'
          git fetch origin --tags
          echo "Current branches:"
          git branch -a

      - name: Push to Gitee
        env:
          GITEE_USER: lucky__cat
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
        run: |
          # 添加 Gitee remote
          git remote add gitee https://${GITEE_USER}:${GITEE_TOKEN}@gitee.com/${GITEE_USER}/magisk-modules.git
          
          # 推送所有分支到 Gitee
          git branch -r | grep -v '\->' | while read remote; do
              branch="${remote#origin/}"
              git branch --track "${branch}" "$remote" 2>/dev/null || true
              git push gitee "${branch}" --force
          done
          
          # 推送所有标签
          git push gitee --tags --force
          
          echo "Push completed"

      - name: Sync Release to Gitee
        if: github.event_name == 'release'
        env:
          GITEE_USER: lucky__cat
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
        run: |
          # 获取发行版信息
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          RELEASE_NAME="${{ github.event.release.name }}"
          RELEASE_BODY="${{ github.event.release.body }}"
          
          echo "Syncing release: $RELEASE_TAG"
          
          # 下载发行版附件
          mkdir -p release_assets
          cd release_assets
          for asset_url in $(echo "${{ toJson(github.event.release.assets) }}" | jq -r '.[].browser_download_url'); do
            echo "Downloading: $asset_url"
            wget $asset_url
          done
          
          # 创建 Gitee 发行版
          echo "Creating Gitee release..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITEE_TOKEN" \
            "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases" \
            -d '{
              "tag_name": "'"${RELEASE_TAG}"'",
              "name": "'"${RELEASE_NAME}"'",
              "body": "'"${RELEASE_BODY}"'",
              "prerelease": false
            }'
          
          # 上传附件
          echo "Uploading assets..."
          for file in *; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              curl -X POST \
                -H "Authorization: token $GITEE_TOKEN" \
                -F "access_token=$GITEE_TOKEN" \
                -F "file=@$file" \
                "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases/${RELEASE_TAG}/attach_files"
            fi
          done
          
          echo "Release sync completed" 