name: Sync to Gitee

on:
  push:
    branches:
      - '*'
  release:
    types: [published, created, edited]
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure Git
        env:
          GITEE_USER: lucky__cat
        run: |
          git config --global user.name "${GITEE_USER}"
          git config --global user.email "${GITEE_USER}@users.noreply.github.com"

      - name: Fetch all branches and tags
        run: |
          git remote set-branches origin '*'
          git fetch origin --tags --force
          echo "Current branches:"
          git branch -a

      - name: Push to Gitee
        env:
          GITEE_USER: lucky__cat
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
        run: |
          # 添加 Gitee remote
          git remote add gitee https://${GITEE_USER}:${GITEE_TOKEN}@gitee.com/${GITEE_USER}/magisk-modules.git
          
          # 推送所有分支到 Gitee
          for branch in $(git branch -r | grep -v '\->' | sed 's/origin\///'); do
            git checkout -b $branch origin/$branch || git checkout $branch
            git push gitee $branch --force
          done
          
          # 推送所有标签
          git push gitee --tags --force
          
          echo "Push completed"

      - name: Sync All Releases to Gitee
        if: github.event_name == 'workflow_dispatch'
        env:
          GITEE_USER: lucky__cat
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取所有 GitHub 发行版
          releases=$(curl -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          
          echo "Found releases to sync"
          
          # 遍历所有发行版
          echo "$releases" | jq -c '.[]' | while read -r release; do
            RELEASE_TAG=$(echo "$release" | jq -r '.tag_name')
            RELEASE_NAME=$(echo "$release" | jq -r '.name')
            RELEASE_BODY=$(echo "$release" | jq -r '.body')
            
            echo "Processing release: $RELEASE_TAG"
            
            # 下载该发行版的所有附件
            mkdir -p "release_assets_${RELEASE_TAG}"
            cd "release_assets_${RELEASE_TAG}"
            
            # 获取所有资产的下载 URL
            assets_urls=$(echo "$release" | jq -r '.assets[].browser_download_url')
            assets_names=$(echo "$release" | jq -r '.assets[].name')
            
            # 下载所有资产文件
            echo "$assets_urls" | while read -r url; do
              if [ ! -z "$url" ]; then
                echo "Downloading: $url"
                wget "$url"
              fi
            done
            
            # 无论是否有资产，都下载源代码压缩包
            echo "Downloading source code archives..."
            if [ -n "$(echo "$release" | jq -r '.zipball_url')" ]; then
              wget -O "${RELEASE_TAG}.zip" "$(echo "$release" | jq -r '.zipball_url')"
            fi
            if [ -n "$(echo "$release" | jq -r '.tarball_url')" ]; then
              wget -O "${RELEASE_TAG}.tar.gz" "$(echo "$release" | jq -r '.tarball_url')"
            fi
            
            # 创建 Gitee 发行版
            echo "Creating Gitee release: $RELEASE_TAG"
            # 确保描述不为空
            RELEASE_BODY="${RELEASE_BODY:-"从 GitHub 同步的发行版 ${RELEASE_TAG}"}"
            response=$(curl -s -X POST \
              -H "Content-Type: application/json;charset=UTF-8" \
              -d "{\"access_token\":\"${GITEE_TOKEN}\",\"tag_name\":\"${RELEASE_TAG}\",\"name\":\"${RELEASE_NAME}\",\"body\":\"${RELEASE_BODY}\",\"prerelease\":false,\"target_commitish\":\"$(git rev-parse HEAD)\"}" \
              "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases")
            
            echo "Release creation response: $response"
            
            # 检查是否创建成功
            if echo "$response" | jq -e '.id' > /dev/null; then
              echo "Release created successfully"
              
              # 上传所有文件
              for file in *; do
                if [ -f "$file" ]; then
                  echo "Uploading: $file"
                  # 检查文件大小（Gitee对文件大小有限制，通常为100MB）
                  file_size=$(du -m "$file" | cut -f1)
                  size_limit=100 # 100MB
                  
                  if [ "$file_size" -gt "$size_limit" ]; then
                    echo "Warning: File $file is ${file_size}MB, which exceeds Gitee's size limit of ${size_limit}MB. Skipping upload."
                    continue
                  fi
                  
                  # 添加重试机制，最多尝试3次
                  max_retries=3
                  retry_count=0
                  upload_success=false
                  
                  while [ $retry_count -lt $max_retries ] && [ $upload_success = false ]; do
                    echo "Uploading $file (attempt $(($retry_count + 1))/$max_retries)..."
                    
                    # 使用 -v 参数查看更详细的请求信息
                    upload_response=$(curl -v -X POST \
                      -H "Content-Type: multipart/form-data" \
                      -F "access_token=${GITEE_TOKEN}" \
                      -F "file=@${file}" \
                      "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases/${RELEASE_TAG}/attach_files" 2>&1)
                    
                    # 检查上传响应
                    if [[ "$upload_response" == *"success"* ]] || [[ "$upload_response" == *"created"* ]]; then
                      echo "Successfully uploaded: $file"
                      upload_success=true
                    else
                      retry_count=$(($retry_count + 1))
                      if [ $retry_count -lt $max_retries ]; then
                        echo "Failed to upload $file. Retrying in 5 seconds..."
                        echo "Response: $upload_response"
                        sleep 5
                      else
                        echo "Failed to upload $file after $max_retries attempts."
                        echo "Response: $upload_response"
                      fi
                    fi
                  done
                  
                  # 等待一下，避免 API 限制
                  sleep 1
                fi
              done
            else
              error_msg=$(echo "$response" | jq -r '.message // "Unknown error"')
              echo "Failed to create release. Response: {\"message\":\"${error_msg}\"}"
            fi
            
            cd ..
            rm -rf "release_assets_${RELEASE_TAG}"
            echo "Completed release: $RELEASE_TAG"
            
            # 等待一下，避免 API 限制
            sleep 2
          done

      - name: Sync New Release to Gitee
        if: github.event_name == 'release'
        env:
          GITEE_USER: lucky__cat
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
        run: |
          # 获取发行版信息
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          RELEASE_NAME="${{ github.event.release.name }}"
          RELEASE_BODY="${{ github.event.release.body }}"
          
          echo "Syncing release: $RELEASE_TAG"
          
          # 下载发行版附件
          mkdir -p release_assets
          cd release_assets
          for asset_url in $(echo "${{ toJson(github.event.release.assets) }}" | jq -r '.[].browser_download_url'); do
            echo "Downloading: $asset_url"
            wget $asset_url
          done
          
          # 下载源代码压缩包
          echo "Downloading source code archives..."
          wget -O "${RELEASE_TAG}.zip" "https://github.com/${{ github.repository }}/archive/refs/tags/${RELEASE_TAG}.zip"
          wget -O "${RELEASE_TAG}.tar.gz" "https://github.com/${{ github.repository }}/archive/refs/tags/${RELEASE_TAG}.tar.gz"
          
          # 创建 Gitee 发行版
          echo "Creating Gitee release..."
          # 确保描述不为空
          RELEASE_BODY="${RELEASE_BODY:-"从 GitHub 同步的发行版 ${RELEASE_TAG}"}"
          response=$(curl -s -X POST \
            -H "Content-Type: application/json;charset=UTF-8" \
            -d "{\"access_token\":\"${GITEE_TOKEN}\",\"tag_name\":\"${RELEASE_TAG}\",\"name\":\"${RELEASE_NAME}\",\"body\":\"${RELEASE_BODY}\",\"prerelease\":false,\"target_commitish\":\"$(git rev-parse HEAD)\"}" \
            "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases")
          
          echo "Release creation response: $response"
          
          # 检查是否创建成功
          if echo "$response" | jq -e '.id' > /dev/null; then
            echo "Release created successfully"
            
            # 上传附件
            echo "Uploading assets..."
            for file in *; do
              if [ -f "$file" ]; then
                echo "Uploading: $file"
                # 检查文件大小（Gitee对文件大小有限制，通常为100MB）
                file_size=$(du -m "$file" | cut -f1)
                size_limit=100 # 100MB
                
                if [ "$file_size" -gt "$size_limit" ]; then
                  echo "Warning: File $file is ${file_size}MB, which exceeds Gitee's size limit of ${size_limit}MB. Skipping upload."
                  continue
                fi
                
                # 添加重试机制，最多尝试3次
                max_retries=3
                retry_count=0
                upload_success=false
                
                while [ $retry_count -lt $max_retries ] && [ $upload_success = false ]; do
                  echo "Uploading $file (attempt $(($retry_count + 1))/$max_retries)..."
                  
                  # 使用 -v 参数查看更详细的请求信息
                  upload_response=$(curl -v -X POST \
                    -H "Content-Type: multipart/form-data" \
                    -F "access_token=${GITEE_TOKEN}" \
                    -F "file=@${file}" \
                    "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases/${RELEASE_TAG}/attach_files" 2>&1)
                  
                  # 检查上传响应
                  if [[ "$upload_response" == *"success"* ]] || [[ "$upload_response" == *"created"* ]]; then
                    echo "Successfully uploaded: $file"
                    upload_success=true
                  else
                    retry_count=$(($retry_count + 1))
                    if [ $retry_count -lt $max_retries ]; then
                      echo "Failed to upload $file. Retrying in 5 seconds..."
                      echo "Response: $upload_response"
                      sleep 5
                    else
                      echo "Failed to upload $file after $max_retries attempts."
                      echo "Response: $upload_response"
                      # 不退出，继续尝试上传其他文件
                    fi
                  fi
                done
                
                # 等待一下，避免 API 限制
                sleep 1
              fi
            done
          else
            echo "Failed to create release. Response: $response"
            exit 1
          fi
          
          echo "Release sync completed"