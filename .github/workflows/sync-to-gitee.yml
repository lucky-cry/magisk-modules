name: Sync to Gitee

on:
  push:
    branches: [ crond_clear_the_blacklist ]
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Sleep for 30 seconds
        run: sleep 30

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: crond_clear_the_blacklist
          
      - name: Configure Git
        env:
          GITEE_USER: lucky__cat
        run: |
          git config --global user.name "${GITEE_USER}"
          git config --global user.email "${GITEE_USER}@users.noreply.github.com"

      - name: Fetch all branches and tags
        run: |
          git remote set-branches origin '*'
          git fetch origin --tags --force
          echo "Current branches:"
          git branch -a

      - name: Push to Gitee
        env:
          GITEE_USER: lucky__cat
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
        run: |
          # 添加 Gitee remote
          git remote add gitee https://${GITEE_USER}:${GITEE_TOKEN}@gitee.com/${GITEE_USER}/magisk-modules.git
          
          # 只同步 crond_clear_the_blacklist 分支
          git checkout crond_clear_the_blacklist
          
          # 更新 update.json 为 Gitee 链接
          cd Source
          VERSION=$(grep 'version=' module.prop | cut -d= -f2)
          VCODE=$(grep 'versionCode=' module.prop | cut -d= -f2)
          cd ..
          
          echo "{" > update.json
          echo "  \"version\": \"$VERSION\"," >> update.json
          echo "  \"versionCode\": \"$VCODE\"," >> update.json
          echo "  \"zipUrl\": \"https://gitee.com/${GITEE_USER}/magisk-modules/releases/download/v${VERSION}/crond_clear_the_blacklist-${VERSION}.zip\"," >> update.json
          echo "  \"changelog\": \"https://gitee.com/${GITEE_USER}/magisk-modules/raw/crond_clear_the_blacklist/changelog\"" >> update.json
          echo "}" >> update.json
          
          # 提交 Gitee 版本的 update.json
          git add update.json
          git commit -m "Update URLs to Gitee links" || true
          
          # 只推送 crond_clear_the_blacklist 分支到 Gitee
          git push gitee crond_clear_the_blacklist:crond_clear_the_blacklist --force
          
          # 推送相关标签
          git push gitee --tags --force
          echo "Push completed"

      - name: Update JSON URLs for GitHub
        if: github.event_name == 'push' && github.ref == 'refs/heads/crond_clear_the_blacklist'
        run: |
          # 清理工作目录
          git clean -fd
          
          # 确保在正确的分支上并更新本地分支
          git checkout crond_clear_the_blacklist
          git pull origin crond_clear_the_blacklist
          
          # 进入 Source 目录
          cd Source
          VERSION=$(grep 'version=' module.prop | cut -d= -f2)
          VCODE=$(grep 'versionCode=' module.prop | cut -d= -f2)
          cd ..
          
          # 更新 update.json 文件为 GitHub 链接
          echo "{" > update.json
          echo "  \"version\": \"$VERSION\"," >> update.json
          echo "  \"versionCode\": \"$VCODE\"," >> update.json
          echo "  \"zipUrl\": \"https://github.com/lucky-cry/magisk-modules/releases/download/v${VERSION}/crond_clear_the_blacklist-${VERSION}.zip\"," >> update.json
          echo "  \"changelog\": \"https://raw.githubusercontent.com/lucky-cry/magisk-modules/crond_clear_the_blacklist/changelog\"" >> update.json
          echo "}" >> update.json
          
          # 检查是否有更改
          if git diff --quiet update.json; then
            echo "No changes to update.json"
          else
            # 提交更改
            git add update.json
            git commit -m "Update URLs to GitHub links"
            git push origin crond_clear_the_blacklist
          fi

      - name: Sync Latest Release to Gitee
        env:
          GITEE_USER: lucky__cat
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取最新的 GitHub 发行版
          latest_release=$(curl -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          
          # 查找当前分支最新的发布
          current_release=$(echo "$latest_release" | jq -c '.[] | select(.assets[].name | contains("crond_clear_the_blacklist"))' | head -n 1)
          
          if [ -z "$current_release" ]; then
            echo "No release found for crond_clear_the_blacklist branch"
            exit 0
          fi
          
          RELEASE_TAG=$(echo "$current_release" | jq -r '.tag_name')
          RELEASE_NAME=$(echo "$current_release" | jq -r '.name')
          RELEASE_BODY=$(echo "$current_release" | jq -r '.body')
          
          echo "Processing release: $RELEASE_TAG"
          
          # 下载发行版附件
          mkdir -p "release_assets"
          cd "release_assets"
          
          # 获取并下载资产
          echo "$current_release" | jq -r '.assets[].browser_download_url' | while read -r url; do
            if [ ! -z "$url" ] && echo "$url" | grep -q "crond_clear_the_blacklist"; then
              echo "Downloading asset: $url"
              filename=$(basename "$url")
              curl -L -H "Authorization: token $GH_TOKEN" -o "$filename" "$url"
              echo "Downloaded: $filename"
            fi
          done
          
          # 创建 Gitee 发行版
          echo "Creating Gitee release: $RELEASE_TAG"
          RELEASE_BODY="${RELEASE_BODY:-"从 GitHub 同步的发行版 ${RELEASE_TAG}"}"
          response=$(curl -s -X POST \
            -H "Content-Type: application/json;charset=UTF-8" \
            -d "{\"access_token\":\"${GITEE_TOKEN}\",\"tag_name\":\"${RELEASE_TAG}\",\"name\":\"${RELEASE_NAME}\",\"body\":\"${RELEASE_BODY}\",\"prerelease\":false,\"target_commitish\":\"$(git rev-parse HEAD)\"}" \
            "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases")
          
          # 上传所有文件
          for file in *; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              release_id=$(echo "$response" | jq -r '.id')
              upload_response=$(curl -X POST \
                -H "Content-Type: multipart/form-data" \
                -F "access_token=${GITEE_TOKEN}" \
                -F "file=@${file}" \
                "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases/${release_id}/attach_files")
              echo "Upload response: $upload_response"
              sleep 2
            fi
          done
          
          cd ..
          rm -rf "release_assets"
          echo "Completed release sync"