name: Build Magisk Module

on:
  push:
    branches:
      - '*'
      - '!main'
    paths:
      - 'Source/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get module info
        id: module_info
        run: |
          MODULE_ID=$(grep -oP 'id=\K.*' Source/module.prop)
          MODULE_NAME=$(grep -oP 'name=\K.*' Source/module.prop)
          MODULE_VERSION=$(grep -oP 'version=\K.*' Source/module.prop)
          MODULE_VERSIONCODE=$(grep -oP 'versionCode=\K.*' Source/module.prop)
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          REPO_NAME=${{ github.repository }}
          
          echo "module_id=$MODULE_ID" >> $GITHUB_OUTPUT
          echo "module_name=$MODULE_NAME" >> $GITHUB_OUTPUT
          echo "module_version=$MODULE_VERSION" >> $GITHUB_OUTPUT
          echo "module_versioncode=$MODULE_VERSIONCODE" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Update updateJson in module.prop
        run: |
          REPO_NAME=${{ steps.module_info.outputs.repo_name }}
          BRANCH_NAME=${{ steps.module_info.outputs.branch_name }}
          sed -i "s|updateJson=.*|updateJson=https://gitee.com/lucky__cat/magisk-modules/raw/Hcfile_sharing/update.json|g" Source/module.prop

      - name: Build module zip
        id: build
        run: |
          MODULE_ID=${{ steps.module_info.outputs.module_id }}
          MODULE_VERSION=${{ steps.module_info.outputs.module_version }}
          BRANCH_NAME=${{ steps.module_info.outputs.branch_name }}
          ZIP_NAME="${MODULE_ID}-${MODULE_VERSION}.zip"
          mkdir temp_module
          cp -r Source/* temp_module/
          # 进入临时目录打包
          cd temp_module
          zip -r "../$ZIP_NAME" ./*
          cd ..
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.module_info.outputs.module_version }}
          name: ${{ steps.module_info.outputs.module_name }} v${{ steps.module_info.outputs.module_version }}
          files: ${{ steps.build.outputs.zip_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update update.json
        run: |
          MODULE_VERSION=${{ steps.module_info.outputs.module_version }}
          MODULE_VERSIONCODE=${{ steps.module_info.outputs.module_versioncode }}
          REPO_NAME=${{ steps.module_info.outputs.repo_name }}
          BRANCH_NAME=${{ steps.module_info.outputs.branch_name }}
          ZIP_NAME=${{ steps.build.outputs.zip_name }}
          # 生成 changelog 字段为 changelog 文件的 raw 链接
          CHANGELOG_URL="https://gitee.com/lucky__cat/magisk-modules/raw/Hcfile_sharing/changelog"
          # Create or update update.json
          cat > update.json << EOF
          {
            "version": "${MODULE_VERSION}",
            "versionCode": ${MODULE_VERSIONCODE},
            "zipUrl": "https://gitee.com/lucky__cat/magisk-modules/releases/download/v${MODULE_VERSION}/${ZIP_NAME}",
            "changelog": "${CHANGELOG_URL}"
          }
          EOF
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add update.json Source/module.prop
          git commit -m "Update module to v${MODULE_VERSION} (${MODULE_VERSIONCODE})"
          git push origin ${BRANCH_NAME}

  sync:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/Hcfile_sharing'  # 只在 Hcfile_sharing 分支运行
    needs: build  # 等待 build job 完成后运行
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure Git
        env:
          GITEE_USER: lucky__cat
        run: |
          git config --global user.name "${GITEE_USER}"
          git config --global user.email "${GITEE_USER}@users.noreply.github.com"

      - name: Push to Gitee
        env:
          GITEE_USER: lucky__cat
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
        run: |
          # 添加 Gitee remote
          git remote add gitee https://${GITEE_USER}:${GITEE_TOKEN}@gitee.com/${GITEE_USER}/magisk-modules.git
          
          # 推送当前分支到 Gitee
          git push gitee ${GITHUB_REF#refs/heads/} --force
          
          # 推送所有标签
          git push gitee --tags --force
          
          echo "Push completed"

      - name: Sync Release to Gitee
        env:
          GITEE_USER: lucky__cat
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
        run: |
          # 从 update.json 获取版本信息
          VERSION=$(grep -oP '"version":\s*"\K[^"]+' update.json)
          TAG_NAME="v${VERSION}"
          
          # 下载发行版附件
          ZIP_NAME=$(ls *.zip 2>/dev/null || echo "")
          if [ -n "$ZIP_NAME" ]; then
            echo "Found zip file: ${ZIP_NAME}, creating release on Gitee..."
            
            # 使用 Gitee API 创建发行版
            release_response=$(curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: token $GITEE_TOKEN" \
              "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases" \
              -d '{
                "tag_name": "'"${TAG_NAME}"'",
                "name": "Release '"${TAG_NAME}"'",
                "body": "Magisk Module Release '"${TAG_NAME}"'",
                "prerelease": false
              }')
            
            echo "Release creation response: ${release_response}"
            
            # 上传发行版附件
            sleep 2  # 等待发行版创建完成
            upload_response=$(curl -X POST \
              -H "Content-Type: multipart/form-data" \
              -H "Authorization: token $GITEE_TOKEN" \
              -F "access_token=${GITEE_TOKEN}" \
              -F "file=@${ZIP_NAME}" \
              "https://gitee.com/api/v5/repos/${GITEE_USER}/magisk-modules/releases/${TAG_NAME}/attach_files")
            
            echo "Upload response: ${upload_response}"
            
            if [[ "$upload_response" == *"success"* ]] || [[ "$upload_response" == *"created"* ]]; then
              echo "Successfully uploaded: $ZIP_NAME"
            else
              echo "Failed to upload $ZIP_NAME. Response: $upload_response"
              exit 1
            fi
          else
            echo "No zip file found, skipping release creation"
          fi
